apiVersion: argoproj.io/v1beta1
kind: ArgoCD
metadata:
  name: argocd
  namespace: gitops
spec:
  applicationSet:
    webhookServer:
      ingress:
        enabled: false
      route:
        enabled: false
  oidcConfig: |
    name: Keycloak
    issuer: https://keycloak.{{ $.Values.sub_domain }}/realms/openshift
    clientID: argocd
    clientSecret: $argocd-oidc:oidc.keycloak.clientSecret
    requestedScopes: ["openid", "profile", "email", "groups"]
  extraConfig:
    {{- range untilStep 1 (int ($.Values.users | add 1)) 1 }}
    accounts.user{{ . }}-pipeline: apiKey
    {{- end }}
    exec.enabled: "true"
    globalProjects: |-
      - labelSelector:
          matchExpressions:
            - key: argocd.argoproj.io/project-inherit
              operator: In
              values:
                - global
        projectName: global
    resource.customizations.health.PersistentVolumeClaim: |
      hs = {}
      if obj.status ~= nil then
        if obj.status.phase ~= nil then
          if obj.status.phase == "Pending" then
            hs.status = "Healthy"
            hs.message = obj.status.phase
            return hs
          end
          if obj.status.phase == "Bound" then
            hs.status = "Healthy"
            hs.message = obj.status.phase
            return hs
          end
        end
      end
      hs.status = "Progressing"
      hs.message = "Waiting for PVC"
      return hs
    resource.respectRBAC: normal
  kustomizeBuildOptions: --enable-helm
  rbac:
    defaultPolicy: role:none
    policy: |
      p, role:none, *, *, */*, deny
      g, system:cluster-admins, role:admin
      g, cluster-admins, role:admin
      p, role:developers, clusters, get, *, allow
      p, role:developers, repositories, get, *, allow
      g, developers, role:developers
    scopes: '[accounts,groups,email]'
  repo:
    sidecarContainers:
    - command:
      - /var/run/argocd/argocd-cmp-server
      env:
      - name: KUSTOMIZE_PLUGIN_HOME
        value: /etc/kustomize/plugin
      - name: SUB_DOMAIN
        value: "{{ $.Values.sub_domain }}"
      image: quay.io/gnunn/tools:latest
      imagePullPolicy: Always
      name: setenv-plugin
      securityContext:
        runAsNonRoot: true
      volumeMounts:
      - mountPath: /var/run/argocd
        name: var-files
      - mountPath: /home/argocd/cmp-server/plugins
        name: plugins
      - mountPath: /tmp
        name: tmp
      - mountPath: /home/argocd/cmp-server/config/plugin.yaml
        name: setenv-cmp-plugin
        subPath: plugin.yaml
    volumes:
    - configMap:
        name: setenv-cmp-plugin
      name: setenv-cmp-plugin
  resourceHealthChecks:
  - check: |
      hs = {}
      hs.status = "Progressing"
      hs.message = ""
      if obj.status ~= nil then
        if obj.status.health ~= nil then
          hs.status = obj.status.health.status
          hs.message = obj.status.health.message
        end
      end
      return hs
    group: argoproj.io
    kind: Application
  - check: |
      health_status = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          numDegraded = 0
          numPending = 0
          msg = ""
          for i, condition in pairs(obj.status.conditions) do
            msg = msg .. i .. ": " .. condition.type .. " | " .. condition.status .. "\n"
            if condition.type == "InstallPlanPending" and condition.status == "True" then
              numPending = numPending + 1
            elseif (condition.type == "InstallPlanMissing" and condition.reason ~= "ReferencedInstallPlanNotFound") then
              numDegraded = numDegraded + 1
            elseif (condition.type == "CatalogSourcesUnhealthy" or condition.type == "InstallPlanFailed" or condition.type == "ResolutionFailed") and condition.status == "True" then
              numDegraded = numDegraded + 1
            end
          end
          if numDegraded == 0 and numPending == 0 then
            health_status.status = "Healthy"
            health_status.message = msg
            return health_status
          elseif numPending > 0 and numDegraded == 0 then
            health_status.status = "Progressing"
            health_status.message = "An install plan for a subscription is pending installation"
            return health_status
          else
            health_status.status = "Degraded"
            health_status.message = msg
            return health_status
          end
        end
      end
      health_status.status = "Progressing"
      health_status.message = "An install plan for a subscription is pending installation"
      return health_status
    group: operators.coreos.com
    kind: Subscription
  - check: |
      hs = {}
      if obj.status ~= nil then
        if obj.status.phase ~= nil then
          if obj.status.phase == "Complete" then
            hs.status = "Healthy"
            hs.message = obj.status.phase
            return hs
          end
        end
      end
      hs.status = "Progressing"
      hs.message = "Waiting for InstallPlan to complete"
      return hs
    group: operators.coreos.com
    kind: InstallPlan
  - check: |
      hs = {}
      hs.status = "Progressing"
      hs.message = ""
      if obj.status ~= nil then
        if obj.status.tags ~= nil then
          numTags = 0
          for _ , item in pairs(obj.status.tags) do
            numTags = numTags + 1
            numItems = 0
            if item.tags ~= nil then
              for _ , item in pairs(item.tags) do
                numItems = numItems + 1
              end
              if numItems == 0 then
                return hs
              end
            end
          end
          if numTags > 0 then
            hs.status = "Healthy"
            hs.message = "ImageStream has tags resolved"
            return hs
          end
        end
      end
      return hs
    group: image.openshift.io
    kind: ImageStream
  - check: |
      hs = {}
      if obj.status ~= nil then
        if obj.status.phase ~= nil then
          if obj.status.phase == "Complete" then
            hs.status = "Healthy"
            hs.message = obj.status.phase
            return hs
          end
        end
      end
      hs.status = "Progressing"
      hs.message = "Waiting for Build to complete"
      return hs
    group: build.openshift.io
    kind: Build
  resourceIgnoreDifferences:
    resourceIdentifiers:
    - customization:
        jsonPointers:
        - /status/ingress
      group: route.openshift.io
      kind: Route
    - customization:
        jsonPointers:
        - /status/ingress
      group: quay.redhat.com
      kind: QuayRegistry
  resourceTrackingMethod: annotation
  server:
    host: argocd-server-gitops.{{ $.Values.sub_domain }}
    ingress:
      enabled: false
    insecure: true
    route:
      enabled: true
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
    service:
      type: ""
  sourceNamespaces:
    {{- range untilStep 1 (int ($.Values.users | add 1)) 1 }}
    - user{{ . }}-argocd
    {{- end }}
